from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from fsm_states import TaskStates, GoalStates
from keyboards import checklist_inline_kb, goals_inline_kb
from utils import load_json, save_json

router = Router()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –¶–ï–õ–ò ===
@router.callback_query(F.data == "add_goal")
async def add_goal_start(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å:")
    await state.set_state(GoalStates.waiting_for_goal_text)
    await call.answer()

@router.message(GoalStates.waiting_for_goal_text)
async def process_goal_text(message: Message, state: FSMContext):
    goals = load_json("data/goals.json")
    goals.append(message.text)
    save_json("data/goals.json", goals)
    await message.answer("üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=goals_inline_kb)
    await state.clear()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò ===
@router.callback_query(F.data == "add_task")
async def add_task_start(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:")
    await state.set_state(TaskStates.waiting_for_task_text)
    await call.answer()

@router.message(TaskStates.waiting_for_task_text)
async def process_task_text(message: Message, state: FSMContext):
    tasks = load_json("data/checklist.json")
    tasks.append(message.text)
    save_json("data/checklist.json", tasks)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=checklist_inline_kb)
    await state.clear()
