from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards import main_menu_kb, goals_inline_kb, checklist_inline_kb
from utils import load_json, get_random_quote
from fsm_states import FSMAddGoal, FSMAddTask
from aiogram.fsm.context import FSMContext

router = Router()

# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    user_data = {"id": message.from_user.id}
    from utils import save_json
    save_json("data/user.json", user_data)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å ü§ñ. –ß–µ–º –∑–∞–π–º—ë–º—Å—è —Å–µ–≥–æ–¥–Ω—è?", 
        reply_markup=main_menu_kb
    )

# üí¨ –¶–∏—Ç–∞—Ç–∞
@router.message(F.text == "üí¨ –¶–∏—Ç–∞—Ç–∞")
async def cmd_quote(message: Message):
    quote = get_random_quote()
    await message.answer(f"üí¨ {quote}")

# üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def cmd_schedule(message: Message):
    schedule = load_json("data/schedule.json", [])
    if not schedule:
        await message.answer("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
    else:
        text = "üìÜ –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n" + "\n".join([f"{i+1}. {item}" for i, item in enumerate(schedule)])
        await message.answer(text)

# üéØ –¶–µ–ª–∏
@router.message(F.text == "üéØ –¶–µ–ª–∏")
async def show_goals(message: Message, state: FSMContext):
    goals = load_json("data/goals.json", [])
    if not goals:
        await message.answer("üéØ –¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=goals_inline_kb)
    else:
        for i, goal in enumerate(goals):
            status = "‚úÖ" if goal.get("done") else "‚ùå"
            await message.answer(f"{status} {goal.get('text')}", reply_markup=goals_inline_kb)

# ‚úÖ –ß–µ–∫–ª–∏—Å—Ç
@router.message(F.text == "‚úÖ –ß–µ–∫–ª–∏—Å—Ç")
async def show_checklist(message: Message, state: FSMContext):
    tasks = load_json("data/checklist.json", [])
    if not tasks:
        await message.answer("üìù –ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç.", reply_markup=checklist_inline_kb)
    else:
        for i, task in enumerate(tasks):
            status = "‚úÖ" if task.get("done") else "‚ùå"
            await message.answer(f"{status} {task.get('text')}", reply_markup=checklist_inline_kb)

# üìà –ü—Ä–æ–≥—Ä–µ—Å—Å
@router.message(F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    goals = load_json("data/goals.json", [])
    tasks = load_json("data/checklist.json", [])

    g_total = len(goals)
    g_done = len([g for g in goals if g.get("done")])
    t_total = len(tasks)
    t_done = len([t for t in tasks if t.get("done")])

    def bar(done, total):
        if total == 0:
            return "‚Äî"
        percent = int((done / total) * 10)
        return "‚ñ∞" * percent + "‚ñ±" * (10 - percent)

    response = f"üéØ –¶–µ–ª–∏: {g_done}/{g_total} {bar(g_done, g_total)}\n"
    response += f"üìù –ó–∞–¥–∞—á–∏: {t_done}/{t_total} {bar(t_done, t_total)}"
    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –∏–∑ checklist
@router.callback_query(F.data == "add_task")
async def add_task_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:")
    await state.set_state(FSMAddTask.text)
    await callback.answer()

@router.callback_query(F.data == "task_done")
async def task_done(callback: CallbackQuery):
    from utils import save_json
    tasks = load_json("data/checklist.json", [])
    if tasks:
        tasks[0]["done"] = True
        save_json("data/checklist.json", tasks)
        await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await callback.answer()

@router.callback_query(F.data == "task_fail")
async def task_fail(callback: CallbackQuery):
    from utils import save_json
    tasks = load_json("data/checklist.json", [])
    if tasks:
        tasks[0]["done"] = False
        save_json("data/checklist.json", tasks)
        await callback.message.answer("üö´ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –∏–∑ goals
@router.callback_query(F.data == "add_goal")
async def add_goal_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:")
    await state.set_state(FSMAddGoal.text)
    await callback.answer()

@router.callback_query(F.data == "goal_done")
async def goal_done(callback: CallbackQuery):
    from utils import save_json
    goals = load_json("data/goals.json", [])
    if goals:
        goals[0]["done"] = True
        save_json("data/goals.json", goals)
        await callback.message.answer("‚úÖ –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await callback.answer()

@router.callback_query(F.data == "goal_fail")
async def goal_fail(callback: CallbackQuery):
    from utils import save_json
    goals = load_json("data/goals.json", [])
    if goals:
        goals[0]["done"] = False
        save_json("data/goals.json", goals)
        await callback.message.answer("üö´ –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp):
    dp.include_router(router)
