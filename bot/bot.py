from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold
from aiogram import F
from aiogram.filters import CommandStart
import asyncio
import json
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from keyboards import main_menu_kb, build_task_inline_kb, build_goal_inline_kb

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

DATA_PATH = "data"
CHECKLIST_FILE = os.path.join(DATA_PATH, "checklist.json")
GOALS_FILE = os.path.join(DATA_PATH, "goals.json")


def load_json(path, default=None):
    try:
        with open(path, encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default if default is not None else []


def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def progress_bar(completed, total):
    percent = int((completed / total) * 10) if total else 0
    return "‚ñÆ" * percent + "‚ñØ" * (10 - percent) + f" {completed}/{total}"


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –î–µ–Ω! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫—É –¥–Ω—è!", reply_markup=main_menu_kb)


@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")


@dp.message(F.text == "üéØ –¶–µ–ª–∏")
async def show_goals(message: Message):
    goals = load_json(GOALS_FILE)
    if not goals:
        await message.answer("–¶–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        for idx, goal in enumerate(goals):
            text = f"üéØ {goal['text']} {'‚úÖ' if goal.get('done') else '‚ùå'}"
            await message.answer(text, reply_markup=build_goal_inline_kb(idx))
        await message.answer("üéØ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å:", reply_markup=build_goal_inline_kb("add"))


@dp.message(F.text == "‚úÖ –ß–µ–∫–ª–∏—Å—Ç")
async def show_checklist(message: Message):
    tasks = load_json(CHECKLIST_FILE)
    if not tasks:
        await message.answer("–ó–∞–¥–∞—á–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        for idx, task in enumerate(tasks):
            text = f"‚òëÔ∏è {task['text']} {'‚úÖ' if task.get('done') else '‚ùå'}"
            await message.answer(text, reply_markup=build_task_inline_kb(idx))
        await message.answer("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:", reply_markup=build_task_inline_kb("add"))


@dp.message(F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    tasks = load_json(CHECKLIST_FILE)
    goals = load_json(GOALS_FILE)
    all_items = tasks + goals
    done = sum(1 for item in all_items if item.get("done"))
    total = len(all_items)
    bar = progress_bar(done, total)
    await message.answer(f"üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{bar}")


@dp.callback_query(F.data.startswith("add_task"))
async def ask_new_task(callback: CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    await callback.answer()
    dp.message.register(handle_new_task, F.text)


async def handle_new_task(message: Message):
    tasks = load_json(CHECKLIST_FILE)
    tasks.append({"text": message.text, "done": False})
    save_json(CHECKLIST_FILE, tasks)
    await message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    dp.message.unregister(handle_new_task)


@dp.callback_query(F.data.startswith("add_goal"))
async def ask_new_goal(callback: CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    await callback.answer()
    dp.message.register(handle_new_goal, F.text)


async def handle_new_goal(message: Message):
    goals = load_json(GOALS_FILE)
    goals.append({"text": message.text, "done": False})
    save_json(GOALS_FILE, goals)
    await message.answer("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    dp.message.unregister(handle_new_goal)


@dp.callback_query(F.data.startswith("task_done"))
async def mark_task_done(callback: CallbackQuery):
    idx = int(callback.data.split(":")[1])
    tasks = load_json(CHECKLIST_FILE)
    if 0 <= idx < len(tasks):
        tasks[idx]["done"] = True
        save_json(CHECKLIST_FILE, tasks)
        await callback.message.edit_text(f"‚òëÔ∏è {tasks[idx]['text']} ‚úÖ")
    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")


@dp.callback_query(F.data.startswith("task_failed"))
async def mark_task_failed(callback: CallbackQuery):
    idx = int(callback.data.split(":")[1])
    tasks = load_json(CHECKLIST_FILE)
    if 0 <= idx < len(tasks):
        tasks[idx]["done"] = False
        save_json(CHECKLIST_FILE, tasks)
        await callback.message.edit_text(f"‚òëÔ∏è {tasks[idx]['text']} ‚ùå")
    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")


@dp.callback_query(F.data.startswith("goal_done"))
async def mark_goal_done(callback: CallbackQuery):
    idx = int(callback.data.split(":")[1])
    goals = load_json(GOALS_FILE)
    if 0 <= idx < len(goals):
        goals[idx]["done"] = True
        save_json(GOALS_FILE, goals)
        await callback.message.edit_text(f"üéØ {goals[idx]['text']} ‚úÖ")
    await callback.answer("–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")


@dp.callback_query(F.data.startswith("goal_failed"))
async def mark_goal_failed(callback: CallbackQuery):
    idx = int(callback.data.split(":")[1])
    goals = load_json(GOALS_FILE)
    if 0 <= idx < len(goals):
        goals[idx]["done"] = False
        save_json(GOALS_FILE, goals)
        await callback.message.edit_text(f"üéØ {goals[idx]['text']} ‚ùå")
    await callback.answer("–¶–µ–ª—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())