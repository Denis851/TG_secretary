import asyncio
import json
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from keyboards import main_menu_kb, checklist_inline_kb, goals_inline_kb

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# ======================== –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ =========================

def load_json(path, default=[]):
    try:
        with open(path, encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# ======================== –•–µ–Ω–¥–ª–µ—Ä—ã =========================

@dp.message(F.text.lower() == "/start")
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –î–µ–Ω! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫—É –¥–Ω—è!", reply_markup=main_menu_kb)

@dp.message(F.text.lower() == "üìÖ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    schedule = load_json("data/schedule.json")
    if not schedule:
        await message.answer("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
    else:
        text = "\n".join([f"{item['time']} ‚Äî {item['activity']}" for item in schedule])
        await message.answer(f"üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{text}")

@dp.message(F.text.lower() == "‚úÖ —á–µ–∫–ª–∏—Å—Ç")
async def show_checklist(message: Message):
    tasks = load_json("data/checklist.json")
    if not tasks:
        await message.answer("‚úÖ –ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É!", reply_markup=checklist_inline_kb)
    else:
        text = "\n".join(tasks)
        await message.answer(f"üìã –¢–µ–∫—É—â–∏–π —á–µ–∫–ª–∏—Å—Ç:\n{text}", reply_markup=checklist_inline_kb)

@dp.message(F.text.lower() == "üéØ —Ü–µ–ª–∏")
async def show_goals(message: Message):
    goals = load_json("data/goals.json")
    if not goals:
        await message.answer("üéØ –¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å –Ω–æ–≤—É—é!", reply_markup=goals_inline_kb)
    else:
        text = "\n".join(goals)
        await message.answer(f"üéØ –¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n{text}", reply_markup=goals_inline_kb)

@dp.message(F.text.lower() == "üìà –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    tasks = load_json("data/checklist.json")
    goals = load_json("data/goals.json")
    completed = len([t for t in tasks if t.startswith("‚úÖ")]) + len([g for g in goals if g.startswith("‚úÖ")])
    total = len(tasks) + len(goals)
    percent = int((completed / total) * 100) if total else 0
    bar = "üü©" * (percent // 10) + "‚¨úÔ∏è" * (10 - percent // 10)
    await message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {percent}%")

# ======================== Inline –¥–µ–π—Å—Ç–≤–∏—è =========================

@dp.callback_query(F.data == "add_task")
async def ask_new_task(callback: types.CallbackQuery):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:")
    await callback.answer()
    dp.message.register(save_task, F.text)

async def save_task(message: Message):
    tasks = load_json("data/checklist.json")
    tasks.append(message.text)
    save_json("data/checklist.json", tasks)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    dp.message.unregister(save_task)

@dp.callback_query(F.data == "add_goal")
async def ask_new_goal(callback: types.CallbackQuery):
    await callback.message.answer("üéØ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å:")
    await callback.answer()
    dp.message.register(save_goal, F.text)

async def save_goal(message: Message):
    goals = load_json("data/goals.json")
    goals.append(message.text)
    save_json("data/goals.json", goals)
    await message.answer("üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    dp.message.unregister(save_goal)

@dp.callback_query(F.data == "task_done")
async def mark_task_done(callback: types.CallbackQuery):
    tasks = load_json("data/checklist.json")
    if tasks:
        tasks[0] = f"‚úÖ {tasks[0]}"
        save_json("data/checklist.json", tasks)
        await callback.message.answer("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await callback.answer()

@dp.callback_query(F.data == "goal_done")
async def mark_goal_done(callback: types.CallbackQuery):
    goals = load_json("data/goals.json")
    if goals:
        goals[0] = f"‚úÖ {goals[0]}"
        save_json("data/goals.json", goals)
        await callback.message.answer("–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await callback.answer()

# ======================== –ó–∞–ø—É—Å–∫ =========================

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
