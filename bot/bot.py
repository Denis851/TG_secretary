import os
import json
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from analyze import daily_report

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üåÖ –£—Ç—Ä–æ"), KeyboardButton(text="üíª –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
    [KeyboardButton(text="üßò –û—Ç–¥—ã—Ö"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç")],
    [KeyboardButton(text="üìù –ß–µ–∫–ª–∏—Å—Ç"), KeyboardButton(text="üéØ –¶–µ–ª–∏")],
    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")],
    [KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"), KeyboardButton(text="üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")],
], resize_keyboard=True)

def inline_buttons(items, prefix):
    buttons = [
        [InlineKeyboardButton(text=f"‚úÖ {item['task'] if isinstance(item, dict) else item}", callback_data=f"{prefix}_{i}")]
        for i, item in enumerate(items)
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def load_json(path, default=[]):
    try:
        with open(path, encoding='utf-8') as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_random_quote():
    try:
        with open("data/quotes.txt", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return random.choice(quotes)
    except Exception:
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."

async def send_quote(bot: Bot, user_id: int):
    quote = get_random_quote()
    await bot.send_message(user_id, f"üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n{quote}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –î–µ–Ω! –Ø —Ç–≤–æ–π –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=main_kb)

@dp.message(F.text == "üåÖ –£—Ç—Ä–æ")
async def morning(message: Message):
    await message.answer("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=main_kb)
    await cmd_checklist(message)

@dp.message(F.text == "üíª –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def productivity(message: Message):
    await message.answer("üß† –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞! –ó–∞–ø—É—Å–∫–∞—é —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é –Ω–∞ 45 –º–∏–Ω—É—Ç.")

@dp.message(F.text == "üßò –û—Ç–¥—ã—Ö")
async def relax(message: Message):
    await message.answer("–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞, —Å–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö... üòå 4-7-8 –¥—ã—Ö–∞–Ω–∏–µ")

@dp.message(F.text == "üìä –û—Ç—á—ë—Ç")
async def report_button(message: Message):
    await cmd_report(message)

@dp.message(F.text == "üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
async def mood_cmd(message: Message):
    mood_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üòä", callback_data="mood_happy"),
         InlineKeyboardButton(text="üòê", callback_data="mood_neutral"),
         InlineKeyboardButton(text="üòû", callback_data="mood_sad")]
    ])
    await message.answer("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=mood_kb)

@dp.callback_query(F.data.startswith("mood_"))
async def handle_mood(callback: types.CallbackQuery):
    mood = callback.data.replace("mood_", "")
    mood_data = load_json("data/mood.json", [])
    mood_data.append({"time": datetime.now().isoformat(), "mood": mood})
    save_json("data/mood.json", mood_data)
    await callback.message.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {mood}")
    await callback.answer()

@dp.message(F.text == "üìù –ß–µ–∫–ª–∏—Å—Ç")
async def cmd_checklist(message: Message):
    checklist = load_json("data/checklist.json", [])
    if not checklist:
        await message.answer("–ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏.")
    else:
        await message.answer("üìù –ó–∞–¥–∞—á–∏:", reply_markup=inline_buttons(checklist, "done_task"))

@dp.message(F.text == "üéØ –¶–µ–ª–∏")
async def cmd_goals(message: Message):
    goals = load_json("data/goals.json", [])
    if not goals:
        await message.answer("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        await message.answer("üéØ –¶–µ–ª–∏:", reply_markup=inline_buttons(goals, "done_goal"))

@dp.callback_query(F.data.startswith("done_task_"))
async def complete_task(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[-1])
    tasks = load_json("data/checklist.json", [])
    if index < len(tasks):
        task = tasks.pop(index)
        save_json("data/checklist.json", tasks)
        await callback.message.answer(f"üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['task'] if isinstance(task, dict) else task}")
    await callback.answer()

@dp.callback_query(F.data.startswith("done_goal_"))
async def complete_goal(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[-1])
    goals = load_json("data/goals.json", [])
    if index < len(goals):
        goal = goals.pop(index)
        save_json("data/goals.json", goals)
        await callback.message.answer(f"üèÅ –¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {goal}")
    await callback.answer()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def prompt_add_task(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ–∫–ª–∏—Å—Ç:")
    dp.message.register_once(handle_add_task)

async def handle_add_task(message: Message):
    tasks = load_json("data/checklist.json", [])
    tasks.append({"task": message.text, "date": datetime.today().strftime("%Y-%m-%d")})
    save_json("data/checklist.json", tasks)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ–∫–ª–∏—Å—Ç!", reply_markup=main_kb)

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
async def prompt_add_goal(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å:")
    dp.message.register_once(handle_add_goal)

async def handle_add_goal(message: Message):
    goals = load_json("data/goals.json", [])
    goals.append(message.text)
    save_json("data/goals.json", goals)
    await message.answer("‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_kb)

@dp.message(F.text == "üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è")
async def cmd_quote(message: Message):
    quote = get_random_quote()
    await message.answer(f"üí¨ {quote}")

@dp.message(Command("–æ—Ç—á—ë—Ç"))
async def cmd_report(message: Message):
    today = datetime.today().strftime("%Y-%m-%d")
    checklist = load_json("data/checklist.json", [])
    goals = load_json("data/goals.json", [])
    mood = load_json("data/mood.json", [])

    report = f"üìù –û—Ç—á—ë—Ç –∑–∞ {today}\n"
    report += "\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
    for item in checklist:
        if item.get("date") == today:
            report += f" - {item.get('task', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    report += "\nüéØ –¶–µ–ª–∏:\n" + "\n".join([f" - {goal}" for goal in goals])
    today_mood = next((m['mood'] for m in reversed(mood) if today in m['time']), '‚Äî')
    report += f"\nüòå –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {today_mood}\n"

    path = f"data/report_{today}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write(report)
    await message.answer_document(document=FSInputFile(path), caption="üì§ –¢–≤–æ–π –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_report, 'cron', hour=21, minute=0, args=[bot, USER_ID])
    scheduler.add_job(send_quote, 'cron', hour=6, minute=0, args=[bot, USER_ID])
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        asyncio.run(main())
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)
