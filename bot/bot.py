import os
import json
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from keyboards import main_kb, inline_actions_kb

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID", 0))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON

def load_json(path, default=[]):
    try:
        with open(path, encoding='utf-8') as f:
            return json.load(f)
    except:
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –•–µ–Ω–¥–ª–µ—Ä—ã

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_handler(message: Message):
    await message.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")

@dp.message(F.text == "üß† –¶–µ–ª–∏")
async def goals_handler(message: Message):
    goals = load_json("data/goals.json", [])
    if not goals:
        await message.answer("üéØ –¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=inline_actions_kb)
    else:
        text = "üéØ –¢–≤–æ–∏ —Ü–µ–ª–∏:\n" + "\n".join([f"- {g}" for g in goals])
        await message.answer(text, reply_markup=inline_actions_kb)

@dp.message(F.text == "‚úÖ –ß–µ–∫–ª–∏—Å—Ç")
async def checklist_handler(message: Message):
    tasks = load_json("data/checklist.json", [])
    if not tasks:
        await message.answer("üìã –ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É:", reply_markup=inline_actions_kb)
    else:
        text = "üìã –¢–µ–∫—É—â–∏–π —á–µ–∫–ª–∏—Å—Ç:\n" + "\n".join([f"- {t['task']}" for t in tasks])
        await message.answer(text, reply_markup=inline_actions_kb)

@dp.message(F.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress_handler(message: Message):
    await message.answer("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

@dp.callback_query(F.data.in_(["done", "not_done", "add_task", "add_goal"]))
async def handle_action(callback: CallbackQuery):
    data = callback.data
    if data == "done":
        await callback.message.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    elif data == "not_done":
        await callback.message.answer("‚ùå –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    elif data == "add_task":
        await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (—á–µ–∫–ª–∏—Å—Ç):")
    elif data == "add_goal":
        await callback.message.answer("üéØ –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤—É—é —Ü–µ–ª—å:")
    await callback.answer()

@dp.message(Command("–æ—Ç—á—ë—Ç"))
async def report_handler(message: Message):
    today = datetime.today().strftime("%Y-%m-%d")
    tasks = load_json("data/checklist.json", [])
    goals = load_json("data/goals.json", [])
    mood = load_json("data/mood.json", [])
    report = f"üìù –û—Ç—á—ë—Ç –∑–∞ {today}\n"
    report += "\n‚úÖ –ó–∞–¥–∞—á–∏:\n" + "\n".join([f"- {t['task']}" for t in tasks])
    report += "\nüéØ –¶–µ–ª–∏:\n" + "\n".join([f"- {g}" for g in goals])
    today_mood = next((m['mood'] for m in reversed(mood) if today in m['time']), '‚Äî')
    report += f"\n\nüòå –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {today_mood}\n"
    os.makedirs("data", exist_ok=True)
    path = f"data/report_{today}.txt"
    with open(path, 'w', encoding='utf-8') as f:
        f.write(report)
    await message.answer_document(FSInputFile(path), caption="üì§ –í–æ—Ç —Ç–≤–æ–π –æ—Ç—á—ë—Ç")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:", e)
