import os
import json
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
main_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üìù –ß–µ–∫–ª–∏—Å—Ç")],
    [KeyboardButton(text="üéØ –¶–µ–ª–∏"), KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞")]
])

mood_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üòä", callback_data="mood_happy"),
        InlineKeyboardButton(text="üòê", callback_data="mood_neutral"),
        InlineKeyboardButton(text="üòû", callback_data="mood_sad"),
    ]
])

# ---------- –§—É–Ω–∫—Ü–∏–∏ ----------
def load_json(path, default=[]):
    try:
        with open(path, encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_random_quote():
    try:
        with open("data/quotes.txt", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return random.choice(quotes)
    except Exception:
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."

async def send_quote(bot: Bot, user_id: int):
    quote = get_random_quote()
    await bot.send_message(user_id, f"üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n<i>{quote}</i>", parse_mode="HTML")

# ---------- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ----------
def get_default_schedule():
    return [
        {"time": "05:30", "activity": "–ü–æ–¥—ä—ë–º, –≤–æ–¥–∞, —Ä–∞–∑–º–∏–Ω–∫–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è"},
        {"time": "06:00", "activity": "–£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"},
        {"time": "07:00", "activity": "–†–∞–±–æ—Ç–∞ / –§—Ä–∏–ª–∞–Ω—Å"},
        {"time": "09:30", "activity": "–ü–µ—Ä–µ—Ä—ã–≤ (—á–∞–π, –ø—Ä–æ–≥—É–ª–∫–∞)"},
        {"time": "10:00", "activity": "–û–±—É—á–µ–Ω–∏–µ / –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"},
        {"time": "11:30", "activity": "–û–±–µ–¥ + –±–ª–∏–∑–∫–∏–µ"},
        {"time": "12:30", "activity": "–†–∞–±–æ—Ç–∞ 2"},
        {"time": "14:30", "activity": "–û—Ç–¥—ã—Ö / –°–æ–Ω"},
        {"time": "15:30", "activity": "–ö—Ä–µ–∞—Ç–∏–≤ / –ü—Ä–æ–µ–∫—Ç—ã"},
        {"time": "17:00", "activity": "–°–µ–º—å—è / –ü—Ä–æ–≥—É–ª–∫–∞"},
        {"time": "19:00", "activity": "–£–∂–∏–Ω, –æ—Ç–¥—ã—Ö"},
        {"time": "20:00", "activity": "–õ–∏—á–Ω–æ–µ –≤—Ä–µ–º—è"},
        {"time": "21:30", "activity": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É"},
        {"time": "22:00", "activity": "–°–æ–Ω"},
    ]

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –î–µ–Ω–∏—Å! –ì–æ—Ç–æ–≤ –∏–¥—Ç–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?", reply_markup=main_kb)

@dp.message(F.text.lower() == "üìÖ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def cmd_schedule(message: Message):
    schedule = load_json("data/schedule.json", get_default_schedule())
    text = "üìÖ –¢–≤–æ–π –¥–µ–Ω—å:\n" + "\n".join([f"{item['time']} ‚Äî {item['activity']}" for item in schedule])
    await message.answer(text)

@dp.message(F.text.lower() == "üìù —á–µ–∫–ª–∏—Å—Ç")
async def cmd_checklist(message: Message):
    checklist = load_json("data/checklist.json", [])
    if not checklist:
        await message.answer("–ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n<code>/–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É –ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∞</code>")
        return
    text = "üìã –¢–µ–∫—É—â–∏–π —á–µ–∫–ª–∏—Å—Ç:\n" + "\n".join([f"üîò {item['task']}" for item in checklist])
    await message.answer(text)

@dp.message(Command("–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É"))
async def cmd_add_task(message: Message):
    text = message.text.replace("/–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É", "").strip()
    if not text:
        await message.answer("‚ùó –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:\n<code>/–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É –í—ã—É—á–∏—Ç—å —Å–ª–æ–≤–∞</code>")
        return
    checklist = load_json("data/checklist.json", [])
    checklist.append({"task": text, "date": datetime.now().strftime("%Y-%m-%d")})
    save_json("data/checklist.json", checklist)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@dp.message(F.text.lower() == "üéØ —Ü–µ–ª–∏")
async def cmd_goals(message: Message):
    goals = load_json("data/goals.json", [])
    if not goals:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥–æ–π:\n<code>/—Ü–µ–ª—å –°—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è</code>")
    else:
        text = "üéØ –¢–≤–æ–∏ —Ü–µ–ª–∏:\n" + "\n".join([f"üîµ {goal}" for goal in goals])
        await message.answer(text)

@dp.message(Command("—Ü–µ–ª—å"))
async def cmd_add_goal(message: Message):
    text = message.text.replace("/—Ü–µ–ª—å", "").strip()
    if not text:
        await message.answer("‚ùó –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏ —Ü–µ–ª—å:\n<code>/—Ü–µ–ª—å –ß–∏—Ç–∞—Ç—å –ø–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü</code>")
        return
    goals = load_json("data/goals.json", [])
    goals.append(text)
    save_json("data/goals.json", goals)
    await message.answer("üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@dp.message(F.text.lower() == "üí¨ —Ü–∏—Ç–∞—Ç–∞")
@dp.message(Command("—Ü–∏—Ç–∞—Ç–∞"))
async def cmd_quote(message: Message):
    quote = get_random_quote()
    await message.answer(f"üí¨ <i>{quote}</i>", parse_mode="HTML")

# ---------- MAIN ----------
async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_quote, "cron", hour=6, minute=0, args=[bot, USER_ID])
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        asyncio.run(main())
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)
