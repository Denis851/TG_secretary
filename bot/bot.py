import os
import json
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üåÖ –£—Ç—Ä–æ"), KeyboardButton(text="üíª –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
    [KeyboardButton(text="üßò –û—Ç–¥—ã—Ö"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç")],
    [KeyboardButton(text="üìÜ –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è")]
], resize_keyboard=True)

mood_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üòä", callback_data="mood_happy"),
     InlineKeyboardButton(text="üòê", callback_data="mood_neutral"),
     InlineKeyboardButton(text="üòû", callback_data="mood_sad")]
])

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def load_json(path, default=[]):
    try:
        with open(path, encoding='utf-8') as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_random_quote():
    try:
        with open("data/quotes.txt", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return random.choice(quotes)
    except Exception:
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."

async def send_quote(bot: Bot, user_id: int):
    quote = get_random_quote()
    await bot.send_message(user_id, f"üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n{quote}")

# --- –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è ---
@dp.message(F.text.lower() == "üìÜ —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è")
async def show_schedule(message: Message):
    schedule = load_json("data/daily_schedule.json", [])
    if not schedule:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª data/daily_schedule.json")
        return
    text = "üìÖ <b>–¢–≤–æ–π —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è:</b>\n"
    for item in schedule:
        text += f"‚è∞ <b>{item['time']}</b>: {item['activity']}\n"
    await message.answer(text, parse_mode="HTML")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    scheduler = AsyncIOScheduler()
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
    scheduler.add_job(send_quote, 'cron', hour=6, minute=0, args=[bot, USER_ID])
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        asyncio.run(main())
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)
