import os
import json
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards import main_menu_kb, checklist_inline_kb, goals_inline_kb

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID", 0))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ====== –£—Ç–∏–ª–∏—Ç—ã ======

DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)

def load_json(name, default=[]):
    path = os.path.join(DATA_DIR, name)
    if not os.path.exists(path): return default
    with open(path, encoding="utf-8") as f:
        return json.load(f)

def save_json(name, data):
    path = os.path.join(DATA_DIR, name)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_random_quote():
    quotes = load_json("quotes.txt", [])
    return random.choice(quotes) if quotes else "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."

# ====== –•–µ–Ω–¥–ª–µ—Ä—ã ======

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu_kb)

@dp.message(F.text == "–ß–µ–∫–ª–∏—Å—Ç")
async def show_checklist(message: Message):
    checklist = load_json("checklist.json")
    if not checklist:
        await message.answer("üìã –ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç.")
    else:
        text = "üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å:\n" + "\n".join([f"- {item}" for item in checklist])
        await message.answer(text)
    await message.answer("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=checklist_inline_kb)

@dp.message(F.text == "–¶–µ–ª–∏")
async def show_goals(message: Message):
    goals = load_json("goals.json")
    if not goals:
        await message.answer("üéØ –¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        text = "üéØ –¢–≤–æ–∏ —Ü–µ–ª–∏:\n" + "\n".join([f"- {g}" for g in goals])
        await message.answer(text)
    await message.answer("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=goals_inline_kb)

@dp.message(F.text == "–ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    await message.answer("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    await message.answer("üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–∫–æ—Ä–æ.")

@dp.callback_query(F.data == "add_task")
async def cb_add_task(callback: CallbackQuery):
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ–∫–ª–∏—Å—Ç:")
    await callback.answer()
    dp.message.register(save_task_once)

async def save_task_once(message: Message):
    checklist = load_json("checklist.json")
    checklist.append(message.text)
    save_json("checklist.json", checklist)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu_kb)
    dp.message.unregister(save_task_once)

@dp.callback_query(F.data == "add_goal")
async def cb_add_goal(callback: CallbackQuery):
    await callback.message.answer("üéØ –ù–∞–ø–∏—à–∏ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")
    await callback.answer()
    dp.message.register(save_goal_once)

async def save_goal_once(message: Message):
    goals = load_json("goals.json")
    goals.append(message.text)
    save_json("goals.json", goals)
    await message.answer("üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu_kb)
    dp.message.unregister(save_goal_once)

@dp.message(Command("–æ—Ç—á—ë—Ç"))
async def cmd_report(message: Message):
    today = datetime.today().strftime("%Y-%m-%d")
    checklist = load_json("checklist.json")
    goals = load_json("goals.json")
    report = f"üìù –û—Ç—á—ë—Ç –∑–∞ {today}\n\n‚úÖ –ó–∞–¥–∞—á–∏:\n" + "\n".join([f"- {t}" for t in checklist])
    report += "\n\nüéØ –¶–µ–ª–∏:\n" + "\n".join([f"- {g}" for g in goals])

    path = f"{DATA_DIR}/report_{today}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write(report)

    await message.answer_document(document=FSInputFile(path), caption="üì§ –¢–≤–æ–π –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")

# ====== –ó–∞–ø—É—Å–∫ ======

async def main():
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
