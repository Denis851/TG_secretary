import os
import json
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.analyze import daily_report

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üåÖ –£—Ç—Ä–æ"), KeyboardButton(text="üíª –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
    [KeyboardButton(text="üßò –û—Ç–¥—ã—Ö"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç")]
], resize_keyboard=True)

mood_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üòä", callback_data="mood_happy"),
     InlineKeyboardButton(text="üòê", callback_data="mood_neutral"),
     InlineKeyboardButton(text="üòû", callback_data="mood_sad")]
])

def load_json(path, default=[]):
    try:
        with open(path, encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_random_quote():
    try:
        with open("data/quotes.txt", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return random.choice(quotes)
    except Exception:
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."

async def send_quote(bot: Bot, user_id: int):
    quote = get_random_quote()
    await bot.send_message(user_id, f"üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n{quote}")

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –î–µ–Ω! –Ø —Ç–≤–æ–π –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=main_kb)

@dp.message(F.text.lower() == "üåÖ —É—Ç—Ä–æ")
async def morning(message: Message):
    await message.answer("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=main_kb)
    await cmd_checklist(message)

@dp.message(F.text.lower() == "üíª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def productivity(message: Message):
    await message.answer("üß† –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞! –ó–∞–ø—É—Å–∫–∞—é —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é –Ω–∞ 45 –º–∏–Ω—É—Ç.")

@dp.message(F.text.lower() == "üßò –æ—Ç–¥—ã—Ö")
async def relax(message: Message):
    await message.answer("–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞, —Å–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö... üòå")

@dp.message(F.text.lower() == "üìä –æ—Ç—á—ë—Ç")
async def cmd_report_button(message: Message):
    await cmd_report(message)

@dp.message(Command("—Ü–∏—Ç–∞—Ç–∞"))
async def cmd_quote(message: Message):
    quote = get_random_quote()
    await message.answer(f"üí¨ {quote}")

@dp.message(Command("—Ü–µ–ª—å"))
async def cmd_add_goal(message: Message):
    text = message.text.replace("/—Ü–µ–ª—å", "").strip()
    if not text:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ü–µ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /—Ü–µ–ª—å [—Ç–µ–∫—Å—Ç —Ü–µ–ª–∏]")
        return
    goals = load_json("data/goals.json", [])
    goals.append(text)
    save_json("data/goals.json", goals)
    await message.answer("üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@dp.message(Command("—Ü–µ–ª–∏"))
async def cmd_goals(message: Message):
    goals = load_json("data/goals.json", [])
    if not goals:
        await message.answer("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        text = "üéØ –¢–≤–æ–∏ —Ü–µ–ª–∏:" + "".join([f"- {g}" for g in goals])
        await message.answer(text)

@dp.message(Command("–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É"))
async def cmd_add_task(message: Message):
    text = message.text.replace("/–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É", "").strip()
    if not text:
        await message.answer("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É –ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É")
        return
    checklist = load_json("data/checklist.json", [])
    checklist.append({"task": text, "date": datetime.today().strftime("%Y-%m-%d")})
    save_json("data/checklist.json", checklist)
    await message.answer("üÜï –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@dp.message(Command("—á–µ–∫–ª–∏—Å—Ç"))
async def cmd_checklist(message: Message):
    checklist = load_json("data/checklist.json", [])
    if not checklist:
        await message.answer("–ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª checklist.json.")
        return
    text = "üìù –ß–µ–∫–ª–∏—Å—Ç –∑–∞–¥–∞—á:
" + "
".join([f"- {item['task']}" for item in checklist])
    await message.answer(text)

@dp.message(Command("–æ—Ç—á—ë—Ç"))
async def cmd_report(message: Message):
    today = datetime.today().strftime("%Y-%m-%d")
    checklist = load_json("data/checklist.json", [])
    goals = load_json("data/goals.json", [])
    mood = load_json("data/mood.json", [])

    report = f"üìù –û—Ç—á—ë—Ç –∑–∞ {today}
"
    report += "
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
"
    for item in checklist:
        if item.get("date") == today:
            report += f" - {item.get('task', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}
"
    report += "
üéØ –¶–µ–ª–∏:
" + "
".join([f" - {goal}" for goal in goals])
    today_mood = next((m['mood'] for m in reversed(mood) if today in m['time']), '‚Äî')
    report += f"
üòå –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {today_mood}
"

    path = f"data/report_{today}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write(report)
    await message.answer_document(document=FSInputFile(path), caption="üì§ –¢–≤–æ–π –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_report, 'cron', hour=21, minute=0, args=[bot, USER_ID])
    scheduler.add_job(send_quote, 'cron', hour=6, minute=0, args=[bot, USER_ID])
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        asyncio.run(main())
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)
