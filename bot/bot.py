import os
import json
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from keyboards import main_menu_kb, checklist_inline_kb, goals_inline_kb

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID", 0))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_task = State()
    waiting_for_goal = State()

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def load_json(path, default=[]):
    try:
        with open(path, encoding='utf-8') as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_random_quote():
    try:
        with open("data/quotes.txt", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return random.choice(quotes)
    except Exception:
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫!", reply_markup=main_menu_kb)

@dp.message(Command("–ø–æ–º–æ—â—å"))
async def help_cmd(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è")

@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚ú®")

@dp.message(F.text == "‚úÖ –ß–µ–∫–ª–∏—Å—Ç")
async def checklist(message: Message):
    tasks = load_json("data/checklist.json")
    if not tasks:
        return await message.answer("–ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. ‚úçÔ∏è –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏.", reply_markup=checklist_inline_kb)

    text = "üìã –ß–µ–∫–ª–∏—Å—Ç:\n"
    completed = 0
    for i, task in enumerate(tasks):
        status = "‚úÖ" if task.get("done") else "‚¨úÔ∏è"
        if task.get("done"): completed += 1
        text += f"{status} {task['task']}\n"
    percent = min(10, max(0, int((completed / len(tasks)) * 10)))
    bar = "‚ñÆ" * percent + "‚ñØ" * (10 - percent)
    text += f"\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {bar}"
    await message.answer(text, reply_markup=checklist_inline_kb)

@dp.message(F.text == "üéØ –¶–µ–ª–∏")
async def goals(message: Message):
    goals = load_json("data/goals.json")
    if not goals:
        return await message.answer("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç üéØ", reply_markup=goals_inline_kb)

    text = "üéØ –¶–µ–ª–∏:\n"
    completed = 0
    for i, goal in enumerate(goals):
        status = "‚úÖ" if goal.get("done") else "‚¨úÔ∏è"
        if goal.get("done"): completed += 1
        text += f"{status} {goal['goal']}\n"
    percent = min(10, max(0, int((completed / len(goals)) * 10)))
    bar = "‚ñÆ" * percent + "‚ñØ" * (10 - percent)
    text += f"\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {bar}"
    await message.answer(text, reply_markup=goals_inline_kb)

@dp.message(F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress(message: Message):
    await goals(message)
    await checklist(message)

# --- Inline –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query(F.data == "add_task")
async def add_task_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:")
    await state.set_state(Form.waiting_for_task)
    await callback.answer()

@dp.callback_query(F.data == "add_goal")
async def add_goal_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å:")
    await state.set_state(Form.waiting_for_goal)
    await callback.answer()

@dp.message(Form.waiting_for_task)
async def process_new_task(message: Message, state: FSMContext):
    tasks = load_json("data/checklist.json")
    tasks.append({"task": message.text, "done": False})
    save_json("data/checklist.json", tasks)
    await message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    await state.clear()

@dp.message(Form.waiting_for_goal)
async def process_new_goal(message: Message, state: FSMContext):
    goals = load_json("data/goals.json")
    goals.append({"goal": message.text, "done": False})
    save_json("data/goals.json", goals)
    await message.answer("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ üéØ")
    await state.clear()

@dp.callback_query(F.data == "task_done")
async def mark_task_done(callback: CallbackQuery):
    tasks = load_json("data/checklist.json")
    for task in tasks:
        if not task.get("done"):
            task["done"] = True
            break
    save_json("data/checklist.json", tasks)
    await callback.message.answer("–û—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é ‚úÖ")
    await callback.answer()

@dp.callback_query(F.data == "goal_done")
async def mark_goal_done(callback: CallbackQuery):
    goals = load_json("data/goals.json")
    for goal in goals:
        if not goal.get("done"):
            goal["done"] = True
            break
    save_json("data/goals.json", goals)
    await callback.message.answer("–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéØ‚úÖ")
    await callback.answer()

@dp.callback_query(F.data == "task_failed")
async def task_failed(callback: CallbackQuery):
    await callback.message.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ ‚è≥")
    await callback.answer()

@dp.callback_query(F.data == "goal_failed")
async def goal_failed(callback: CallbackQuery):
    await callback.message.answer("–¶–µ–ª—å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üïê")
    await callback.answer()

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    scheduler = AsyncIOScheduler()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
