# bot.py ‚Äî –î–µ–Ω–∏—Å –§–æ–∫—É—Å v2 (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import os
import json
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üß† –¶–µ–ª–∏")],
    [KeyboardButton(text="‚úÖ –ß–µ–∫–ª–∏—Å—Ç"), KeyboardButton(text="‚úàÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å")]
], resize_keyboard=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def load_json(path, default=[]):
    try:
        with open(path, encoding='utf-8') as f:
            return json.load(f)
    except:
        return default

def save_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_progress_bar(completed, total):
    percent = int((completed / total) * 10) if total > 0 else 0
    return "‚ñà" * percent + "‚ñë" * (10 - percent) + f" {completed}/{total}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –î–µ–Ω! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫—É –¥–Ω—è!", reply_markup=main_kb)

@dp.message(F.text.lower() == "üìÖ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    schedule = load_json("data/schedule.json")
    text = "<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
    for item in schedule:
        text += f"<b>{item['time']}</b> ‚Äî {item['activity']}\n"
    await message.answer(text)

@dp.message(F.text.lower() == "üß† —Ü–µ–ª–∏")
async def show_goals(message: Message):
    goals = load_json("data/goals.json")
    if not goals:
        await message.answer("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏!")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ {g['text']}" if g['done'] else f"‚¨úÔ∏è {g['text']}", callback_data=f"goal_{i}")]
        for i, g in enumerate(goals)
    ])
    await message.answer("<b>üß† –¶–µ–ª–∏:</b>", reply_markup=kb)

@dp.message(F.text.lower() == "‚úÖ —á–µ–∫–ª–∏—Å—Ç")
async def show_checklist(message: Message):
    checklist = load_json("data/checklist.json")
    if not checklist:
        await message.answer("–ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏!")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ {item['task']}" if item['done'] else f"‚¨úÔ∏è {item['task']}", callback_data=f"task_{i}")]
        for i, item in enumerate(checklist)
    ])
    await message.answer("<b>‚úÖ –ß–µ–∫–ª–∏—Å—Ç:</b>", reply_markup=kb)

@dp.message(F.text.lower() == "‚úàÔ∏è –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    goals = load_json("data/goals.json")
    checklist = load_json("data/checklist.json")
    g_done = len([g for g in goals if g['done']])
    t_done = len([t for t in checklist if t['done']])
    text = (
        f"<b>‚úàÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
        f"–¶–µ–ª–∏: {get_progress_bar(g_done, len(goals))}\n"
        f"–ó–∞–¥–∞—á–∏: {get_progress_bar(t_done, len(checklist))}"
    )
    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π/–∑–∞–¥–∞—á
@dp.callback_query(F.data.startswith("goal_"))
async def complete_goal(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[1])
    goals = load_json("data/goals.json")
    goals[index]["done"] = not goals[index].get("done", False)
    save_json("data/goals.json", goals)
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")
    await show_goals(callback.message)

@dp.callback_query(F.data.startswith("task_"))
async def complete_task(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[1])
    checklist = load_json("data/checklist.json")
    checklist[index]["done"] = not checklist[index].get("done", False)
    save_json("data/checklist.json", checklist)
    await callback.answer("–û—Ç–º–µ—á–µ–Ω–æ!")
    await show_checklist(callback.message)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ü–∏—Ç–∞—Ç (–ø—Ä–∏–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
def get_random_quote():
    try:
        with open("data/quotes.txt", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return random.choice(quotes)
    except:
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."

async def send_quote():
    quote = get_random_quote()
    await bot.send_message(USER_ID, f"üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n{quote}")

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_quote, 'cron', hour=6, minute=0)  # –ø—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        asyncio.run(main())
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞:", e)
