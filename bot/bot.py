# –®–∞–≥ 1: –î–æ–±–∞–≤–∏–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –≤ —á–µ–∫–ª–∏—Å—Ç –∏ —Ü–µ–ª–∏

from aiogram.utils.keyboard import InlineKeyboardBuilder

# –û–±–Ω–æ–≤–∏–º cmd_checklist –∏ cmd_goals:

@dp.message(F.text.lower() == "üìã —á–µ–∫–ª–∏—Å—Ç")
async def cmd_checklist(message: Message):
    checklist = load_json("data/checklist.json", [])
    if not checklist:
        await message.answer("–ß–µ–∫–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n<code>/–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É</code>")
        return

    for idx, item in enumerate(checklist):
        status = "‚úÖ" if item.get("done") else "üîò"
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if not item.get("done") else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
            callback_data=f"check_{idx}"
        )]])
        await message.answer(f"{status} {item['task']}", reply_markup=kb)

@dp.callback_query(F.data.startswith("check_"))
async def mark_checklist_done(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    checklist = load_json("data/checklist.json", [])
    if 0 <= idx < len(checklist):
        checklist[idx]["done"] = not checklist[idx].get("done", False)
        save_json("data/checklist.json", checklist)
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await cmd_checklist(callback.message)


@dp.message(F.text.lower() == "üåü —Ü–µ–ª–∏")
async def cmd_goals(message: Message):
    goals = load_json("data/goals.json", [])
    if not goals:
        await message.answer("–¶–µ–ª–µ–π –Ω–µ—Ç. –î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥–æ–π:\n<code>/—Ü–µ–ª—å –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É</code>")
        return
    for idx, goal in enumerate(goals):
        if isinstance(goal, dict):
            text = goal.get("text", "‚Äî")
            done = goal.get("done", False)
        else:
            text = goal
            done = False
            goals[idx] = {"text": goal, "done": False}

        status = "‚úÖ" if done else "üîò"
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if not done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
            callback_data=f"goal_{idx}"
        )]])
        await message.answer(f"{status} {text}", reply_markup=kb)
    save_json("data/goals.json", goals)

@dp.callback_query(F.data.startswith("goal_"))
async def mark_goal_done(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    goals = load_json("data/goals.json", [])
    if 0 <= idx < len(goals):
        goals[idx]["done"] = not goals[idx].get("done", False)
        save_json("data/goals.json", goals)
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await cmd_goals(callback.message)
